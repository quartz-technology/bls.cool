{"version":3,"sources":["components/ToastAlert.tsx","components/SignatureVerifier.tsx","App.tsx"],"names":["ToastAlert","toast","title","description","id","status","Alert","maxWidth","alignSelf","flexDirection","variant","VStack","space","flexShrink","w","HStack","alignItems","justifyContent","Icon","Text","fontSize","fontWeight","color","IconButton","icon","Close","size","_icon","onPress","close","px","SignatureVerifier","useToast","React","useState","message","setMessage","signature","setSignature","pubKey","setPubKey","enabled","setEnabled","useEffect","match","length","c","isHexadecimal","View","base","md","lg","bold","TextArea","placeholder","maxW","h","maxH","value","onChangeText","newText","Divider","Button","isDisabled","a","async","bls","isVerified","show","render","App","NativeBaseProvider","Center","flex"],"mappings":"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","file":"static/js/app.34acd458.chunk.js","sourcesContent":["import {Alert, CloseIcon, HStack, IconButton, VStack, Text, useToast} from \"native-base\";\nimport {ToastType} from \"./SignatureVerifier\";\n\ninterface IProps {\n    toast: ToastType;\n    title: string;\n    description: string;\n    id: number;\n    status: \"success\" | \"error\";\n}\n\nexport default function ToastAlert({toast, title, description, id, status}: IProps) {\n    return (\n        <Alert maxWidth=\"100%\" alignSelf=\"center\" flexDirection=\"row\" status={status} variant={\"top-accent\"} >\n            <VStack space={1} flexShrink={1} w=\"100%\">\n                <HStack flexShrink={1} alignItems=\"center\" justifyContent=\"space-between\">\n                    <HStack space={2} flexShrink={1} alignItems=\"center\">\n                        <Alert.Icon />\n                        <Text fontSize=\"md\" fontWeight=\"medium\" flexShrink={1} color={\"darkText\"}>\n                            {title}\n                        </Text>\n                    </HStack>\n                    <IconButton variant=\"unstyled\" icon={<CloseIcon size=\"3\" />} _icon={{color: \"darkText\"}} onPress={() => toast.close(id)} />\n                </HStack>\n                <Text px=\"6\" color={\"darkText\"}>\n                    {description}\n                </Text>\n            </VStack>\n        </Alert>\n    )\n}\n","import React from \"react\";\nimport {Button, TextArea, useToast, View, VStack, Text, Divider} from \"native-base\";\nimport * as bls from \"@noble/bls12-381\";\nimport {InterfaceToastProps} from \"native-base/lib/typescript/components/composites/Toast\";\nimport ToastAlert from \"./ToastAlert\";\nimport {isHexadecimal} from 'is-hexadecimal'\n\nexport type ToastType = {show: (props: InterfaceToastProps) => any, close: (id: any) => void, closeAll: () => void, isActive: (id: any) => boolean};\n\nexport default function SignatureVerifier() {\n    const toast: ToastType = useToast();\n    const [message, setMessage] = React.useState<string>(\"\");\n    const [signature, setSignature] = React.useState<string>(\"\");\n    const [pubKey, setPubKey] = React.useState<string>(\"\");\n    const [enabled, setEnabled] = React.useState<boolean>(false);\n\n    React.useEffect(() => {\n        const regexSignature = /^[a-fA-F0-9]{192}$/g\n        const regexPublicKey = /^[a-fA-F0-9]{96}$/g\n\n        if (signature.match(regexSignature) && pubKey.match(regexPublicKey)) {\n            if (message.length % 2 == 0 && message.length != 0) {\n                for (const c of message) {\n                    if (!isHexadecimal(c)) {\n                        setEnabled(false);\n                        return;\n                    }\n                }\n                setEnabled(true);\n            } else {\n                setEnabled(false);\n            }\n        } else {\n            setEnabled(false);\n        }\n    }, [signature, message, pubKey]);\n\n    return (\n        <View>\n            <VStack space={5} alignItems=\"center\">\n            <VStack space={10} alignItems={\"start\"}>\n                <VStack space={2} alignItems={\"start\"}>\n                    <Text fontSize={{\n                        base: 'md',\n                        md: 'lg',\n                        lg: 'xl'\n                    }} bold={true}>Enter your signature below:</Text>\n                    <TextArea placeholder=\"...\" w={[50, 100, 200, 400, 500]} maxW=\"500\" h={\"100vh\"} maxH={\"100\"} value={signature} onChangeText={(newText) => {\n                        setSignature(newText);\n                    }} />\n                </VStack>\n                <Divider />\n                <VStack space={2} alignItems={\"start\"}>\n                    <Text fontSize={{\n                        base: 'md',\n                        md: 'lg',\n                        lg: 'xl'\n                    }} bold={true}>Enter your message below:</Text>\n                    <TextArea placeholder=\"dead...\" w={[50, 100, 200, 400, 500]} maxW=\"500\" h={\"100vh\"} maxH={\"100\"} value={message} onChangeText={(newText) => {\n                        setMessage(newText);\n                    }} />\n                </VStack>\n                <Divider />\n                <VStack space={2} alignItems={\"start\"}>\n                    <Text fontSize={{\n                        base: 'md',\n                        md: 'lg',\n                        lg: 'xl'\n                    }} bold={true}>Enter your public key below:</Text>\n                    <TextArea placeholder=\"beef...\" w={[50, 100, 200, 400, 500]} maxW=\"500\" h={\"100vh\"} maxH={\"100\"} value={pubKey} onChangeText={(newText) => {\n                        setPubKey(newText);\n                    }} />\n                </VStack>\n            </VStack>\n                <Button isDisabled={!(enabled)} onPress={async () => {\n                    const isVerified = (await bls.verify(signature, message, pubKey));\n                    let status: \"error\" | \"success\" = \"error\";\n                    let title = \"failed\"\n                    let description = \"The signature does not match the public key / message.\";\n\n                    if (isVerified) {\n                        status = \"success\";\n                        title = \"succeeded\"\n                        description = \"The signature corresponds to the public key / message.\"\n                    }\n\n                    toast.show({ render: ({ id }) => {\n                            return <ToastAlert toast={toast} title={\"Verification \" + title} description={description} id={id} status={status} />;\n                        }\n                    });\n                }}>\n                    Verify Signature\n                </Button>\n            </VStack>\n        </View>\n    )\n}\n","import React from \"react\";\nimport {\n  Center,\n  NativeBaseProvider,\n} from \"native-base\";\nimport SignatureVerifier from \"./components/SignatureVerifier\";\n\nexport default function App() {\n    return (\n        <NativeBaseProvider>\n            <Center flex={1} px={3}>\n                <SignatureVerifier />\n            </Center>\n        </NativeBaseProvider>\n  );\n}\n"],"sourceRoot":""}